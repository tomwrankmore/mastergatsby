{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red140\green211\blue254;\red23\green23\blue23;\red202\green202\blue202;
}
{\*\expandedcolortbl;;\cssrgb\c61176\c86275\c99608;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww17900\viewh15780\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\b\fs28 \cf0 \ul \ulc0 Static queries (ToppingsFilter)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone Static queries do not take variables.\
They can be run in components with a React Hook.\
\
useStaticQuery and graphql come from Gatsby.\
\
ToppingsFilter\
\
Main export function is called Toppings filter \
Firstly there\'92s a variable set to the return of a useStaticQuery method..\
SO that variable is the 
\f2\i data
\f1\i0  object, it\'92s destructured to \{toppings, pizzas\} cos they\'92re the names of the queries in the query.\
 \
The graphql query returns allSanityPizzas>nodes>toppings> name, id\
\
The toppings query isn\'92t in use.\
\
toppingsWithCounts is set to returned value of countPizzasInToppings\
\
countPizzasInToppings functions declaration takes in pizza.nodes as \'91pizzas\'92 from the useStaticQuery / graphql query which is just all pizzas.\
\
The query is only the toppings name id and vegetarian boolean.\
\
Variable counts is set to pizzas ie pizza.nodes from query.\
You map over that and return new array with just the pizza.toppings.\
So each array item could have an array inside of like 4 toppings.\
\
.flat() smashes all embedded arrays into one large array of all toppings, \
So there will be more than one instance some toppings.\
\
Next is reduce. So each iteration, existingTopping is set to id of the iterated to topping.\
If it exists already in the accumulator object 
\f2\i which is set in the second argument of reduce()\

\f1\i0 Then we add 1 to the count property of that topping in the acc object.\
ELSE it\'92s a new topping and we set a new entry in the accumulator object like\
\pard\pardeftab720\sl420\partightenfactor0

\f3 \cf2 \cb3 \expnd0\expndtw0\kerning0
acc\cf4 [\cf2 topping\cf4 .\cf2 id\cf4 ] =\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1 \cf0 \kerning1\expnd0\expndtw0 And set it to an object containing keys: id, name and count. Set count to 1.\
Then return the acc which is now an object filled with objects named by the id of the topping. \
\
create variable called sortedToppings set to Object.values(count) to get a an array from the accumulator object.\
Sort method on the items orders them in descending order, highest at the top. b - a.\
\
\'97\'97\'97\'97\
\
In the JSX which create the HTML, toppingsWithCounts is set to returned value of countPizzasInToppings which is sortedToppings.}