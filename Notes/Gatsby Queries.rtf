{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red183\green111\blue179;\red23\green23\blue23;\red202\green202\blue202;
\red70\green137\blue204;\red66\green179\blue255;\red212\green214\blue154;\red89\green138\blue67;\red109\green109\blue109;
\red140\green211\blue254;\red194\green126\blue101;}
{\*\expandedcolortbl;;\cssrgb\c77255\c52549\c75294;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c33725\c61176\c83922;\cssrgb\c30980\c75686\c100000;\cssrgb\c86275\c86275\c66667;\cssrgb\c41569\c60000\c33333;\cssrgb\c50196\c50196\c50196;
\cssrgb\c61176\c86275\c99608;\cssrgb\c80784\c56863\c47059;}
\paperw11900\paperh16840\margl1440\margr1440\vieww17900\viewh15780\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\b\fs28 \cf0 \ul \ulc0 Notes on Gatsby queries\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone Two types of queries: Page and Static.\
\
Page, are dynamic, ie can accept variables.\
\
Export query from page and Gatsby will recognise that you have made a query and pass \'91data\'92 into your default exported function.\
\
Import graphql from Gatsby\
\
Export variable with graphql query assigned to it.\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf2 \cb3 \expnd0\expndtw0\kerning0
export\cf4 \cb3  \cf5 \cb3 const\cf4 \cb3  \cf6 \cb3 query\cf4 \cb3  = \cf7 \cb3 graphql\cf4 \cb3 `\
\cf5 \cb3 query\cf4 \cb3  \cf7 \cb3 PizzaQuery\cf4 \cb3  \{\cb1 \}\cb3 \
`\cb1 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1 \cf0 \kerning1\expnd0\expndtw0 You don\'92t have to name the query but you can if you want, kind of like anonymous function vs named.\
\
Put your graphql query inside \{\} to make query.\
\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb3 \expnd0\expndtw0\kerning0
Gatsby will recognise that I've exported a graphql component from the page and it will run it behind the scenes and stick it into the props.data. Which we pass into page module.\cf4 \cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1 \cf0 \kerning1\expnd0\expndtw0 \
\
The above is for PizzasPage component.\
\
Fragments, check image part of query in pizzas.js for an example. Rather than querying all the fields of \'91fluid\'92 one by one, you can use a fragment which are included in the Gatsby source plugin we\'92re using. \
For the fluid example we use \'85GatsbySanityImageFluid. \
This will grab all fields associated with fluid query. \
\
Never a loading state on Gatsby  because it\'92s all pre built. Like server side rendering, stuff happens at build time.\
\
\'97\'97\'97\'97\'97\'97\
\
So we\'92ve made a query to allSanityPizzas and called it pizzas.\
Included 
\f3\i nodes>name, id, slug, toppings, image\

\f1\i0 \
Export pizzasPage component which gets passed props from query automatically.\
Destructure to \{data\}\
Make variable, call it pizzas and assign data.pizzas.nodes in there, which will be a list of all pizzas along with their name, id, slug etc.\
Pass that variable containing pizza list into PizzaList component \
\
You pass arguments into components like pizzas = \{pizzas\} which means on the other end there\'92s a variable called pizzas containing a variable called pizzas containing the pizzas. \
SO, in PizzaList we destructure the first one leaving us with pizzas variable, which we map over and run SinglePizza component on each instance.\
\
Into SinglePizza we must pass the iterated to/mapped to item/pizza\
\
In SinglePizza.,  we return html with links using pizza.slug.current, spans using pizza.name, THEN\
\
In a p tag we do this:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf9 \cb3 \expnd0\expndtw0\kerning0
<\cf5 p\cf9 >\cf5 \{\cf10 \cb3 pizza\cf4 .\cf10 toppings\cf4 .\cf7 \cb3 map\cf4 \cb3 ((\cf10 topping\cf4 ) \cf5 \cb3 =>\cf4 \cb3  \cf10 topping\cf4 .\cf10 name\cf4 ).\cf7 \cb3 join\cf4 \cb3 (\cf11 \cb3 ', '\cf4 \cb3 )\cf5 \cb3 \}\cf9 </\cf5 p\cf9 >\cf4 \cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1 \cf0 \kerning1\expnd0\expndtw0 \
Which maps over any toppings contained in pizza data returns topping.name\
All the results end up in returned array which we can join together inside the P tags with commas to separate.}