{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\b\fs28 \cf0 \ul \ulc0 Notes on Gatsby intro lessons\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone Gatsby is fast because it\'92s pre generation. There\'92s a build step.\
Wordpress is \'91on demand\'92. Makes requests in real time to DB based on slug/URL in order to serve pages.\
\
This kind of thing happens in build phase:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\fs22 \cf2 \CocoaLigature0 \
extract queries from components\
write out requires - 0.023s\
run page queries\

\f1\fs28 \cf0 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Gatsby generates a graph from all those request possibilities at build time, and generates the necessary HTML.\
\
Only loads critical CSS for each page. Loads CSS before content, no FOUC.\
\
Does \'91rehydration\'92 to integrate dynamic React components/applications on top of static HTML.\
\
Image processing is great at build time. No worries about responsiveness of images.\
\
Gatsby is not a CMS, for that we need Sanity.io\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97	\
\

\f0\b Public
\f1\b0  is the output production folder\
\
\'97\'97\'97\'97\'97\'97\'97\
\
Pages can be dynamically generate or they can be done on file system routing. None dynamic live in Pages.\
\
\'97\'97\'97\'97\'97\
\
For each page you must import React.\
Then you must export a function.\
Gatsby assumes that the default export from a Page is what will be rendered when someone visits that page.\
Just make a page like tom.js in pages folder and it will generate a URL.\
\
\'97\'97\'97\'97\'97\
\
Re usable components like Nav go in Components folder.\
In a component you export a function containing what you want to be rendered. nav>ul>li>a\
\
Use Link tags, not href. Instant reload. Html5 push state. Known as declarative. 98% of the time for Gatsby websites.\
\'91navigate\'92 API is the other option for imperative links.\
\
Use styled components to style them.\
Import into Layout.js\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Layout.js contains Global styles and anything that wraps every page.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Use gatsby-browser.js & gatsby-ssr.js to wrap all page elements in Layout.js, only if you want EVERY page wrapped in Layout.js\
wrapPageElement function gets a couple arguments, element which is page element and props object.\
\
\'97\'97\'97\'97\'97\
\
When you use Layout.js component Gatsby passes in \'91props\'92 object which contains, among other things, all the elements on the page.\
\
Every React component receives Props. \
Props are passed into the Layout component, wherever it is used. \
ie. All dom elements on index in between Layout component tags will be passed as children inside the props object.\
\
In our site, in Layout.js we destructure the props object to access \{ children \} then plonk it in the Layout.js component in between <Nav/> and <Footer/>\
\
We use wrapPageElement in browser config file to wrap all pages in Layout.js\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 wrapPageElement gets arguments \'91element\'92 and \'91props\'92 and returns Layout.js.\
Layout still needs access to props>children from each page. \
So we pass FROM wrapPageElement \'85props spread operator of everything inside props. Which is destructured in Layout.js to \{children\}. \
\{children\} in Layout.js is DOM ELEMENTS for that page.\
\
\'97\'97\'97\'97\'97\'97\
\
\
}